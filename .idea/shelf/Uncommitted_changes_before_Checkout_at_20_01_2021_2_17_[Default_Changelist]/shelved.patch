Index: qbee/vizualization.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pickle\r\nimport pandas as pd\r\nimport numpy as np\r\nimport networkx as nx\r\nimport matplotlib.pyplot as plt\r\nimport holoviews as hv\r\nimport tkinter as tk\r\nfrom bokeh.plotting import show\r\nfrom pyvis.network import Network\r\n\r\nroot = tk.Tk()\r\n\r\nscreen_width = root.winfo_screenwidth()\r\nscreen_height = root.winfo_screenheight()\r\n\r\nhv.extension('bokeh')\r\n\r\n\r\ndef make_edges(df: pd.DataFrame):\r\n    df['edge'] = df.apply(lambda x: set(eval(x['to'])).difference(set(eval(x['from']))), axis=1)\r\n\r\n\r\ndef clear_system_str(s: str):\r\n    s = s.replace('{', '').replace('}', '')\r\n    s = s.replace('\\'', '').replace('\\'', '')\r\n    s = s.replace('[', '').replace(']', '')\r\n    return s\r\n\r\n\r\ndef remove_braces(df: pd.DataFrame):\r\n    df['edge'] = df['edge'].apply(lambda x: str(x).replace('{', '').replace('}', ''))\r\n    df['edge'] = df['edge'].apply(lambda x: str(x).replace('\\'', '').replace('\\'', ''))\r\n    df['from'] = df['from'].apply(lambda x: str(x).replace('[', '').replace(']', ''))\r\n    df['from'] = df['from'].apply(lambda x: str(x).replace('{', '').replace('}', ''))\r\n    df['from'] = df['from'].apply(lambda x: str(x).replace('\\'', '').replace('\\'', ''))\r\n    df['to'] = df['to'].apply(lambda x: str(x).replace('[', '').replace(']', ''))\r\n    df['to'] = df['to'].apply(lambda x: str(x).replace('{', '').replace('}', ''))\r\n    df['to'] = df['to'].apply(lambda x: str(x).replace('\\'', '').replace('\\'', ''))\r\n\r\n\r\ndef get_processed_nodes(df: pd.DataFrame):\r\n    return pd.unique(df['from'])\r\n\r\n\r\ndef get_nodes_enumeration_in_process_order(df: pd.DataFrame) -> dict:\r\n    return dict([(v, k) for (k, v) in enumerate(df['from'].unique())])\r\n\r\n\r\ndef get_df(log_file: str):\r\n    log_df = pd.read_feather(log_file)\r\n    make_edges(log_df)\r\n    remove_braces(log_df)\r\n    return log_df\r\n\r\n\r\ndef in_edges_count(G: nx.DiGraph):\r\n    return [G.in_degree(n) for n in G.nodes]\r\n\r\n\r\ndef nodes_with_multiple_in_edges_and_count(G: nx.DiGraph):\r\n    return list(filter(lambda nd: nd[1] > 1, zip(G.nodes, in_edges_count(G))))\r\n\r\n\r\ndef visualize_pyvis(log_file: str,\r\n                    quad_systems_file: str,\r\n                    output_html=\"quad.html\",\r\n                    width=int(screen_width * 0.8),\r\n                    height=int(screen_height * 0.8)):\r\n    df = get_df(log_file)\r\n\r\n    quad_systems = pickle.load(open(quad_systems_file, 'rb'))\r\n    quad_systems = set(map(lambda s: clear_system_str(str(s)), quad_systems))\r\n    print(quad_systems)\r\n    g = nx.from_pandas_edgelist(df, \"from\", \"to\", edge_attr=\"edge\", create_using=nx.DiGraph)\r\n    quad_edges = list(filter(lambda e: e[1] in quad_systems, g.edges))\r\n    quad_edges_labels = list(map(lambda e: g.get_edge_data(*e)['edge'], quad_edges))\r\n\r\n    g = nx.subgraph(g, get_processed_nodes(df))\r\n    g = nx.DiGraph(g)\r\n    for e, l in zip(quad_edges, quad_edges_labels):\r\n        g.add_edge(*e, edge=l)\r\n    for node, attributes in g.nodes.items():\r\n        attributes['title'] = node\r\n    g = nx.relabel_nodes(g, get_nodes_enumeration_in_process_order(df))\r\n    nodes_in_edges_count = nodes_with_multiple_in_edges_and_count(g)\r\n\r\n    print(f\"Count of nodes with multiple parents: {len(nodes_in_edges_count)} / {len(g.nodes)} \"\r\n          f\"= {np.round(len(nodes_in_edges_count) / len(g.nodes) * 100, 1)}%\")\r\n    print(nodes_in_edges_count)\r\n\r\n    for (node, attributes), n_parents in zip(g.nodes.items(), in_edges_count(g)):\r\n        attributes['n_parents'] = n_parents\r\n        if n_parents > 1:\r\n            attributes['color'] = '#ffff66'  # light yellow\r\n        elif node == 0:\r\n            attributes['color'] = '#32cd32'  # lime green\r\n        else:\r\n            attributes['color'] = '#87cefa'  # light sky bly\r\n\r\n        if attributes['title'] in quad_systems:\r\n            attributes['color'] = '#ff0000'  # red\r\n\r\n    nt = Network(directed=True,\r\n                 height=f\"{height}px\", width=f\"{width}px\",\r\n                 heading=\"Quadratization algorithm visualization\")\r\n    nt.add_nodes(list(g.nodes.keys()),\r\n                 title=[v['title'] for v in g.nodes.values()],\r\n                 color=[v['color'] for v in g.nodes.values()])\r\n    for f, t in g.edges:\r\n        nt.add_edge(f, t, label=g.get_edge_data(f, t)['edge'], arrowStrikethrough=True)\r\n    nt.show_buttons(filter_=['physics', 'layout'])\r\n    nt.set_options(r\"\"\"\r\n    var options = {\r\n        \"configure\": {\r\n            \"enabled\": true\r\n        },\r\n        \"edges\": {\r\n            \"color\": {\r\n                \"inherit\": true\r\n            },\r\n            \"smooth\": {\r\n                \"enabled\": false,\r\n                \"type\": \"continuous\"\r\n            }\r\n        },\r\n        \"layout\": {\r\n            \"hierarchical\": {\r\n              \"enabled\": true,\r\n              \"levelSeparation\": 315,\r\n              \"nodeSpacing\": 245,\r\n              \"treeSpacing\": 325\r\n            }\r\n        },\r\n        \"interaction\": {\r\n            \"dragNodes\": true,\r\n            \"hideEdgesOnDrag\": false,\r\n            \"hideNodesOnDrag\": false,\r\n            \"keyboard\": {\r\n                \"enabled\": true\r\n            },\r\n            \"navigationButtons\": true,\r\n            \"tooltipDelay\": 100\r\n        },\r\n        \"physics\": {\r\n            \"enabled\": true,\r\n            \"stabilization\": {\r\n                \"enabled\": true,\r\n                \"fit\": true,\r\n                \"iterations\": 1000,\r\n                \"onlyDynamicEdges\": false,\r\n                \"updateInterval\": 50\r\n            },\r\n            \"hierarchicalRepulsion\": {\r\n                \"centralGravity\": 0,\r\n                \"springLength\": 180,\r\n                \"springConstant\": 0.15,\r\n                \"nodeDistance\": 380\r\n            },\r\n            \"minVelocity\": 0.75,\r\n            \"solver\": \"hierarchicalRepulsion\"\r\n        }\r\n    }\r\n    \"\"\")\r\n    nt.show(output_html)\r\n\r\n\r\ndef visualize_bokeh(log_file: str):\r\n    df = get_df(log_file)\r\n    g = hv.Graph(df)\r\n    g = g.relabel('Directed Graph').opts(directed=True,\r\n                                         node_size=10,\r\n                                         arrowhead_length=0.01,\r\n                                         width=int(screen_width * 0.8),\r\n                                         height=int(screen_height * 0.8), )\r\n    show(hv.render(g))\r\n\r\n\r\nif __name__ == '__main__':\r\n    visualize_pyvis('../log/log.feather', '../log/quad_systems.pkl')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/qbee/vizualization.py b/qbee/vizualization.py
--- a/qbee/vizualization.py	
+++ b/qbee/vizualization.py	
@@ -128,7 +128,8 @@
               "enabled": true,
               "levelSeparation": 315,
               "nodeSpacing": 245,
-              "treeSpacing": 325
+              "treeSpacing": 325,
+              "sortMethod": "directed"
             }
         },
         "interaction": {
